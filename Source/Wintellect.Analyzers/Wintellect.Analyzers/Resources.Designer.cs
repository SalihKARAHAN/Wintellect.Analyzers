//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wintellect.Analyzers {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Wintellect.Analyzers.Resources", typeof(Resources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifying the AssemblyCompanyAttribute identifies the company that produced the assembly.
        /// </summary>
        internal static string AssembliesHaveCompanyAttributeAnalyzerDescription {
            get {
                return ResourceManager.GetString("AssembliesHaveCompanyAttributeAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a filled out AssemblyCompanyAttribute to the assembly properties.
        /// </summary>
        internal static string AssembliesHaveCompanyAttributeAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("AssembliesHaveCompanyAttributeAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assemblies need the AssemblyCompanyAttribute.
        /// </summary>
        internal static string AssembliesHaveCompanyAttributeAnalyzerTitle {
            get {
                return ResourceManager.GetString("AssembliesHaveCompanyAttributeAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifying the AssemblyCopyrightAttribute sets who owns the copyright to the assembly.
        /// </summary>
        internal static string AssembliesHaveCopyrightAttributeAnalyzerDescription {
            get {
                return ResourceManager.GetString("AssembliesHaveCopyrightAttributeAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a filled out AssemblyCopyrightAttribute to the assembly properties.
        /// </summary>
        internal static string AssembliesHaveCopyrightAttributeAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("AssembliesHaveCopyrightAttributeAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assemblies need the AssemblyCopyrightAttribute.
        /// </summary>
        internal static string AssembliesHaveCopyrightAttributeAnalyzerTitle {
            get {
                return ResourceManager.GetString("AssembliesHaveCopyrightAttributeAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifying the AssemblyDescriptionAttribute declares the purpose of the assembly.
        /// </summary>
        internal static string AssembliesHaveDescriptionAttributeAnalyzerDescription {
            get {
                return ResourceManager.GetString("AssembliesHaveDescriptionAttributeAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a filled out AssemblyDescriptionAttribute to the assembly properties.
        /// </summary>
        internal static string AssembliesHaveDescriptionAttributeAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("AssembliesHaveDescriptionAttributeAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assemblies need the AssemblyDescriptionAttribute.
        /// </summary>
        internal static string AssembliesHaveDescriptionAttributeAnalyzerTitle {
            get {
                return ResourceManager.GetString("AssembliesHaveDescriptionAttributeAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifying the AssemblyTitleAttribute helps identify the assembly.
        /// </summary>
        internal static string AssembliesHaveTitleAttributeAnalyzerDescription {
            get {
                return ResourceManager.GetString("AssembliesHaveTitleAttributeAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a filled out AssemblyTitleAttribute to the assembly properties.
        /// </summary>
        internal static string AssembliesHaveTitleAttributeAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("AssembliesHaveTitleAttributeAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assemblies need the AssemblyTitleDescriptionAttribute.
        /// </summary>
        internal static string AssembliesHaveTitleAttributeAnalyzerTitle {
            get {
                return ResourceManager.GetString("AssembliesHaveTitleAttributeAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods with variable length arguments (param array) can lead to performance problems inside loops.
        /// </summary>
        internal static string AvoidCallingMethodsWithParamArgsInLoopsAnalyzerDescription {
            get {
                return ResourceManager.GetString("AvoidCallingMethodsWithParamArgsInLoopsAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Call to a method using a param array as arguments &apos;{0}&apos; in a loop.
        /// </summary>
        internal static string AvoidCallingMethodsWithParamArgsInLoopsAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("AvoidCallingMethodsWithParamArgsInLoopsAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid calling methods with param array arguments in loops.
        /// </summary>
        internal static string AvoidCallingMethodsWithParamArgsInLoopsAnalyzerTitle {
            get {
                return ResourceManager.GetString("AvoidCallingMethodsWithParamArgsInLoopsAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Being explicit about your types is better according to CLR via C# by Jeffrey Richter.
        /// </summary>
        internal static string AvoidPreDefinedTypesAnalyzerDescription {
            get {
                return ResourceManager.GetString("AvoidPreDefinedTypesAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Convert &apos;{0}&apos; to the explicit type &apos;{1}&apos;.
        /// </summary>
        internal static string AvoidPreDefinedTypesAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("AvoidPreDefinedTypesAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use explicit types instead of predefined to avoid confusion.
        /// </summary>
        internal static string AvoidPreDefinedTypesAnalyzerTitle {
            get {
                return ResourceManager.GetString("AvoidPreDefinedTypesAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always use the multiple parameter version of Debug.Assert for better error reporting.
        /// </summary>
        internal static string CallAssertMethodsWithMessageParameterAnalyzerDescription {
            get {
                return ResourceManager.GetString("CallAssertMethodsWithMessageParameterAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Never use the single parameter Debug.Assert.
        /// </summary>
        internal static string CallAssertMethodsWithMessageParameterAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("CallAssertMethodsWithMessageParameterAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always use Debug.Assert methods that have a message parameter.
        /// </summary>
        internal static string CallAssertMethodsWithMessageParameterAnalyzerTitle {
            get {
                return ResourceManager.GetString("CallAssertMethodsWithMessageParameterAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Design.
        /// </summary>
        internal static string CategoryDesign {
            get {
                return ResourceManager.GetString("CategoryDesign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation.
        /// </summary>
        internal static string CategoryDocumentation {
            get {
                return ResourceManager.GetString("CategoryDocumentation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Formatting.
        /// </summary>
        internal static string CategoryFormatting {
            get {
                return ResourceManager.GetString("CategoryFormatting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performance.
        /// </summary>
        internal static string CategoryPerformance {
            get {
                return ResourceManager.GetString("CategoryPerformance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage.
        /// </summary>
        internal static string CategoryUsage {
            get {
                return ResourceManager.GetString("CategoryUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When writing new classes, they should be declared as sealed.
        /// </summary>
        internal static string ClassesShouldBeSealedAnalyzerDescription {
            get {
                return ResourceManager.GetString("ClassesShouldBeSealedAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The class &apos;{0}&apos; should be declared sealed if this is a newly written class.
        /// </summary>
        internal static string ClassesShouldBeSealedAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("ClassesShouldBeSealedAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New classes should be declared as sealed.
        /// </summary>
        internal static string ClassesShouldBeSealedAnalyzerTitle {
            get {
                return ResourceManager.GetString("ClassesShouldBeSealedAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make sealed.
        /// </summary>
        internal static string ClassesShouldBeSealedCodeFixActionText {
            get {
                return ResourceManager.GetString("ClassesShouldBeSealedCodeFixActionText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Document this direct throw.
        /// </summary>
        internal static string ExceptionDocumentationMissingAnalyzerActionMessage {
            get {
                return ResourceManager.GetString("ExceptionDocumentationMissingAnalyzerActionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alll direct throws must always be documented with &lt;exception&gt; tags.
        /// </summary>
        internal static string ExceptionDocumentationMissingAnalyzerDescription {
            get {
                return ResourceManager.GetString("ExceptionDocumentationMissingAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Document the direct throw of type &apos;{0}&apos; with an &lt;exception&gt; tag.
        /// </summary>
        internal static string ExceptionDocumentationMissingAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("ExceptionDocumentationMissingAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All direct throws must be documented with &lt;exception&gt; tags.
        /// </summary>
        internal static string ExceptionDocumentationMissingAnalyzerTitle {
            get {
                return ResourceManager.GetString("ExceptionDocumentationMissingAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If and else statements must use braces even for single line results.
        /// </summary>
        internal static string IfAndElseMustHaveBracesAnalyzerDescription {
            get {
                return ResourceManager.GetString("IfAndElseMustHaveBracesAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; statements must have braces.
        /// </summary>
        internal static string IfAndElseMustHaveBracesAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("IfAndElseMustHaveBracesAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If and else statements must use braces.
        /// </summary>
        internal static string IfAndElseMustHaveBracesAnalyzerTitle {
            get {
                return ResourceManager.GetString("IfAndElseMustHaveBracesAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enclose statement in braces.
        /// </summary>
        internal static string IfAndElseMustHaveBracesCodeFixProviderActionMessage {
            get {
                return ResourceManager.GetString("IfAndElseMustHaveBracesCodeFixProviderActionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Pending&gt;.
        /// </summary>
        internal static string PendingText {
            get {
                return ResourceManager.GetString("PendingText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods returning Tasks must end in &quot;Task&quot; to indicate they are asynchronous.
        /// </summary>
        internal static string ReturningTaskRequiresAsyncAnalyzerDescription {
            get {
                return ResourceManager.GetString("ReturningTaskRequiresAsyncAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method name {0} should be renamed {0}Async.
        /// </summary>
        internal static string ReturningTaskRequiresAsyncAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("ReturningTaskRequiresAsyncAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All Task or Task&lt;T&gt; returning method names must end with Async.
        /// </summary>
        internal static string ReturningTaskRequiresAsyncAnalyzerTitle {
            get {
                return ResourceManager.GetString("ReturningTaskRequiresAsyncAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must always specify the Justification parameter with the SuppressionMessage attribute.
        /// </summary>
        internal static string SuppressionMessageMissingJustificationAnalyzerDescription {
            get {
                return ResourceManager.GetString("SuppressionMessageMissingJustificationAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SuppressionMessage on &apos;{0}&apos; needs the Justification parameter filled out.
        /// </summary>
        internal static string SuppressionMessageMissingJustificationAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("SuppressionMessageMissingJustificationAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SuppressionMessageAttribute needs to specify the Justification parameter.
        /// </summary>
        internal static string SuppressionMessageMissingJustificationAnalyzerTitle {
            get {
                return ResourceManager.GetString("SuppressionMessageMissingJustificationAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A DebugggerDisplayAttribute should be used on all public classes to make debugging of the class easier.
        /// </summary>
        internal static string UseDebuggerDisplayAttributeDescription {
            get {
                return ResourceManager.GetString("UseDebuggerDisplayAttributeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The public class &apos;{0}&apos; does not have a DebuggerDisplay attribute applied.
        /// </summary>
        internal static string UseDebuggerDisplayAttributeMessageFormat {
            get {
                return ResourceManager.GetString("UseDebuggerDisplayAttributeMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a DebuggerDisplay attribute.
        /// </summary>
        internal static string UseDebuggerDisplayAttributeTitle {
            get {
                return ResourceManager.GetString("UseDebuggerDisplayAttributeTitle", resourceCulture);
            }
        }
    }
}
